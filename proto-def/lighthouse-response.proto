syntax = "proto2";

message LighthouseResponse {
  // The timestamp of when the results were generated.
  optional string fetch_time = 1; // TODO make Timestamp

  // The url requested to lightrider.
  optional string requested_url = 2;

  // The final analyzed URL, differs from requested_url when there were
  // redirects.
  optional string final_url = 3;

  // The version of Lighthouse with which these results were generated.
  optional string lighthouse_version = 4;

  optional Environment environment = 5;

  optional string user_agent = 6;

  repeated string run_warnings = 7;

  optional RuntimeError runtime_error = 8;

  // A map containing the results of the audits, keyed by audit id. Audits may
  // be referenced within more than one category.
  // map<string, AuditResult> audits = 9;

  // A map containing the categories of audits, keyed by category id.
  map<string, Category> categories = 10;

  map<string, CategoryGroup> category_groups = 11;

  optional ConfigSettings config_settings = 12;
}

message Environment {
  optional string network_user_agent = 1;
  optional string host_user_agent = 2;
  optional int32 benchmark_index = 3;
}

message RuntimeError {
  optional string code = 1;
  optional string message = 2;
}

message ConfigSettings {
  repeated string output = 1;
  optional int64 max_wait_for_load = 2;
  optional string throttling_method = 3;
  optional Throttling throttling = 4;
  optional bool gatherMode = 5;
  optional bool disable_storage_reset = 6;
  optional bool disable_device_emulation = 7;
  optional string emulated_form_factor = 8;
  optional string locale = 9;
  repeated string blocked_url_patterns = 10;
  optional string additional_trace_categories = 11;
  map<string, string> extra_headers = 12; // ??? confirm
  repeated string only_audits = 13;
  repeated string only_categories = 14;
  repeated string skip_audits = 15;
}

message Throttling {
  optional int32 rtt_ms = 1;
  optional float throughput_kbps = 2;
  optional float request_latency_ms = 3;
  optional float download_throughput_kbps = 4;
  optional int32 upload_throughput_kbps = 5;
  optional int32 cpu_slowdown_multiplier = 6;
}

message CategoryGroup {
  optional string title = 1;
  optional string description = 2;
}

// Message containing a category of audits and their combined weighted score.
message Category {
  // The human-friendly name of the category.
  optional string title = 1;

  optional string id = 2;

  // A description of what this category is about (e.g. these help you validate
  // your PWA).
  optional string description = 3;

  // The overall score of the category, the weighted average of all its audits,
  // from 0-1.
  optional float score = 4;

  // An optional description for manual audits within this category.
  optional string manual_description = 5;

  // References to all the audit members and their weight in this category.
  repeated AuditRef audit_refs = 6;
}

// A Category's reference to an AuditResult, with a weight for category scoring.
message AuditRef {
  // Matches a key in the top-level `audits` map.
  optional string id = 1;

  // The weight of the audit's score in the overall category score.
  optional float weight = 2;

  optional string group = 3;
}

// Message containing the result of an individual Lighthouse audit.
// message AuditResult {
//   // A brief description of the audit. The text can change depending on if the
//   // audit passed or failed.
//   optional string title = 1;

//   // A more detailed description that describes why the audit is important and
//   // links to Lighthouse documentation on the audit; markdown links supported.
//   optional string description = 2;

//   // The scored value determined by the audit, in the range `0-1`, or NaN if
//   // `score_display_mode` indicates not scored.
//   optional float score = 3;

//   // The ways an audit score should be interpreted:
//   enum ScoreDisplayMode {
//     // Unknown mode. This should not be used.
//     SCORE_DISPLAY_MODE_UNSPECIFIED = 0;
//     // Pass/fail audit (0 and 1 are the only possible scores).
//     BINARY = 1;
//     // Scores of 0-1, inclusive.
//     NUMERIC = 2;
//     // The audit is an FYI only, and can't be interpreted as pass/fail. Score is
//     // NaN and should be ignored.
//     INFORMATIVE = 3;
//     // The audit turned out to not apply to the page. Score is NaN and should be
//     // ignored.
//     NOT_APPLICABLE = 4;
//     // The audit exists only to tell you to review something yourself. Score is
//     // NaN and should be ignored
//     MANUAL = 5;
//     // There was an error while running the audit (check `error_message` for
//     // details). Score is NaN and should be ignored.
//     ERROR = 6;
//   }

//   // The mode for how the score should be interpreted.
//   optional ScoreDisplayMode score_display_mode = 4;

//   // An explanation of audit-related issues encountered on the test page.
//   optional string explanation = 5;

//   // Error message from any exception thrown while running this audit.
//   optional string error_message = 6;

//   // Extra information provided by some types of audits.
//   oneof details {
//     AuditMetricDetails metric_details = 7;
//     AuditOpportunityDetails opportunity_details = 8;
//   }
// }